Parameters:
  awsSourceAccount:
    Description: 'AWS source account for creating resources, default is Blake C'
    Type: String
    Default: <string>
  InstanceType:
    Description: Enter instance type. Default is t2.large.
    Type: String
    Default: t2.large
    AllowedValues:
      - t2.micro
      - t2.medium
      - m1.small
      - m1.large
      - t2.large
  ELBName:
    Description: Name for ELB
    Type: String
  imageid:
    Description: Enter the ID of existing AMI image
    Type: String
    Default: <ami-####>
  BucketName:
    Description: Name of S3 Bucket
    Type: String
  VpcId:
    Description: >-
      ID of the VPC onto which to launch the application, default is
      vpc-
    Type: String
    Default: <vpc-000000>
  PublicSubnetId1:
    Description: ID of public subnet
    Type: String
    Default: <subnet-0000000>
  PublicSubnetId2:
    Description: ID of public subnet
    Type: String
    Default: <subnet-00000000000>
  PrivateSubnetId1:
    Description: 'ID of private subnet 1, default is subnet-000000000000'
    Type: String
    Default: <subnet-000000000000>
  SQSName:
    Description: 'Name of SQS Queue, default is cfSQS'
    Type: String
    Default: cfSQS
Resources:
  cfSQS:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: !Ref SQSName
    Metadata:
      'AWS::CloudFormation::Designer':
        id: <metadata filled in>
  cfELKEC2:
    Type: 'AWS::EC2::Instance'
    Properties:
      IamInstanceProfile: sessionmanagerinstanceprofile
      ImageId: !Ref imageid
      InstanceType: !Ref InstanceType
      Monitoring: true
      SecurityGroupIds:
        - !GetAtt elbSG.GroupId
      SubnetId: !Ref PrivateSubnetId1
      Tags:
        - Key: Owner
          Value: <group name>
    Metadata:
      'AWS::CloudFormation::Designer':
        id: <auto-generated>

  elbSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: ELB target security group
    Metadata:
      'AWS::CloudFormation::Designer':
        id: <auto-generated>
  InboundRule:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0
      FromPort: 80
      ToPort: 80
      GroupId:
        'Fn::GetAtt':
          - elbSG
          - GroupId
  OutboundRule:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      CidrIp: 0.0.0.0/0
      CidrIpv6: String
      FromPort: 0
      GroupId:
        'Fn::GetAtt':
          - elbSG
          - GroupId
      IpProtocol: tcp
      ToPort: 9999
    Metadata:
      'AWS::CloudFormation::Designer':
        id: <auto-generated<
  cfs3bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketName
      AccessControl: Private
      ObjectLockEnabled: true
      ObjectLockConfiguration:
        ObjectLockEnabled: Enabled
        Rule:
          DefaultRetention:
            Mode: GOVERNANCE
            Days: 6
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      Tags:
        - Key: Owner
          Value: <group name>
    Metadata:
      'AWS::CloudFormation::Designer':
        id: <auto-generated>
  cfs3bucketpolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref BucketName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AWSCloudTrailAclCheck0000000000
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: 's3:GetBucketAcl'
            Resource: !GetAtt 
              - cfs3bucket
              - Arn
          - Sid: AWSCloudTrailWrite00000000000
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: 's3:PutObject'
            Resource: !Sub '${cfs3bucket.Arn}/AWSLogs/*'
            Condition:
              StringEquals:
                's3:x-amz-acl': bucket-owner-full-control
          - Effect: Allow
            Principal:
              AWS: '<<<<<<arn:aws:iam::000000000000:root>>>>'
            Action: 's3:PutObject'
            Resource: !Sub '${cfs3bucket.Arn}/AWSLogs/*'
          - Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action: 's3:PutObject'
            Resource: !Sub '${cfs3bucket.Arn}/AWSLogs/*'
            Condition:
              StringEquals:
                's3:x-amz-acl': bucket-owner-full-control
          - Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action: 's3:GetBucketAcl'
            Resource: !GetAtt 
              - cfs3bucket
              - Arn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: <auto-generated>
  sqsPolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      Queues:
        - !GetAtt cfSQS.Arn
      PolicyDocument:
        Id: example-ID
        Statement:
          - Sid: example-statement-ID
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: 'SQS:SendMessage'
            Resource: !Ref cfSQS
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref awsSourceAccount
              ArnLike:
                'aws:SourceArn': !GetAtt cfs3bucket.Arn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: <auto-generated>
  cfELB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      LoadBalancerAttributes:
        - Key: access_logs.s3.bucket
          Value: !Ref cfs3bucket
      Name: !Ref ELBName
      SecurityGroups:
        - !Ref elbSG
      Subnets:
        - !Ref PublicSubnetId1
        - !Ref PublicSubnetId2
      Type: application
    Metadata:
      'AWS::CloudFormation::Designer':
        id: <auto-generated>
  cfELBtg:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 60
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Name: cfELBtg
      Port: 80
      Protocol: HTTP
      Targets:
        - Id: !Ref cfELKEC2
          Port: 5601
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId
    Metadata:
      'AWS::CloudFormation::Designer':
        id: <auto-generated>
  cfELBlistener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref cfELBtg
          Type: forward
      LoadBalancerArn: !Ref cfELB
      Port: 80
      Protocol: HTTP
    Metadata:
      'AWS::CloudFormation::Designer':
        id: <auto-generated>

